syntax = "proto3";

package auth_v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/kirillmc/trainings-auth/pkg/auth_v1;auth_v1";

option(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info:{
    title:"Auth API",
    version:"1.0.0",
    contact:{
      name:"Telegram",
      email:"https://t.me/McK03"
    };
  };

  host:"localhost:8081",
  schemes:HTTP,
  schemes:HTTPS,
  consumes:"application/json",
  produces:"application/json",
};

service AuthV1{
  rpc Login(LoginRequest) returns (LoginResponse){
    option(google.api.http) = {
      post: "/login"
      body:"*"
    };
  }

  rpc GetRefreshToken(GetRefreshTokenRequest) returns (GetRefreshTokenResponse){
    option(google.api.http) = {
      post: "/get-refresh-token"
      body:"*"
    };
  }

  rpc GetAccessToken(GetAccessTokenRequest) returns (GetAccessTokenResponse){
    option(google.api.http) = {
      post: "/get-access-token"
      body:"*"
    };
  }
}

message LoginRequest{
  string login = 1[(validate.rules).string = {min_len:1,max_len:50}];
  string password = 2[(validate.rules).string = {pattern:"^[A-Za-z0-9]*$",min_len:8, max_len:50}];
}

message LoginResponse{
  string refresh_token=1;
}

message GetRefreshTokenRequest{
  string old_refresh_token=1;
}

message GetRefreshTokenResponse{
  string refresh_token=1;
}

message GetAccessTokenRequest{
  string refresh_token=1;
}

message GetAccessTokenResponse{
  string access_token=1;
}